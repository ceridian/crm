#!/usr/bin/env node
var app = require('../app');
var debug = require('debug')('crm:server');
var https = require('https');
var port = normalizePort(process.env.PORT || '443');
var models = require("../models");

app.set('port', port);


var options = {
	key: fs.readFileSync('./server.key'),
	cert: fs.readFileSync('./server.crt')
};

models.sequelize.sync().complete(function(err) {
	if(err){
		console.log(err);
	}else{
		var server = https.createServer(options, app);
		io = require("socket.io").listen(server);
		server.listen(port);
		server.on('error', onError);
		server.on('listening', onListening);
		io.on('connection', function(socket){
			console.log('connected io');
		});
		console.log('443');
	}
});

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
